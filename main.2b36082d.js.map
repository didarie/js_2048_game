{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","INITIAL_STATE","status","STATUS","idle","state","map","row","slice","score","moves","animation","newCell","newGrid","move","getRandomCell","hasAvailableMoves","lose","columns","getGridData","newColumns","playing","win","direction","grid","i","length","newRow","filter","cell","mergeCells","push","unshift","JSON","stringify","x","y","totalCells","randomIndex","Math","floor","random","value","isEmpty","data","currentRow","reverse","sum","module","exports","touchStartX","touchStartY","swipeDirection","require","game","button","document","querySelector","field","messageStart","messageWin","messageLose","fieldRows","rows","fieldCells","cells","emptyField","forEach","classList","remove","textContent","updateCell","arr","add","classes","index","findIndex","element","startsWith","includes","every","e","checkStatus","handleTouchStart","touches","clientX","clientY","handleTouchMove","currentX","currentY","swipeX","swipeY","abs","handleTouchEnd","moveLeft","moveRight","moveUp","moveDown","addEventListener","target","start","restart","code","passive"],"mappings":"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","file":"main.2b36082d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Game {\n  static get STATUS() {\n    return {\n      idle: 'idle',\n      playing: 'playing',\n      win: 'win',\n      lose: 'lose',\n    };\n  }\n\n  static get INITIAL_STATE() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.status = Game.STATUS.idle;\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.moves = 0;\n\n    this.animation = {\n      newCell: [],\n    };\n  }\n\n  moveLeft() {\n    const newGrid = this.move('left');\n\n    if (newGrid) {\n      this.state = newGrid;\n\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newGrid)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveRight() {\n    const newGrid = this.move('right');\n\n    if (newGrid) {\n      this.state = newGrid;\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newGrid)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveUp() {\n    const columns = this.getGridData();\n    const newColumns = this.move('up', columns);\n\n    if (newColumns) {\n      this.state = this.getGridData(newColumns);\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newColumns)) {\n        this.lose();\n      }\n    }\n  }\n\n  moveDown() {\n    const columns = this.getGridData();\n    const newColumns = this.move('down', columns);\n\n    if (newColumns) {\n      this.state = this.getGridData(newColumns);\n      this.animation.newCell = this.getRandomCell();\n\n      if (!this.hasAvailableMoves(newColumns)) {\n        this.lose();\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS.playing;\n    this.getRandomCell();\n    this.getRandomCell();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = Game.STATUS.idle;\n    this.score = 0;\n    this.state = this.initialState.map((row) => row.slice());\n  }\n\n  // Add your own methods here\n  lose() {\n    this.status = Game.STATUS.lose;\n  }\n\n  win() {\n    this.status = Game.STATUS.win;\n  }\n\n  move(direction, grid = this.state) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const newGrid = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      let newRow = grid[i].filter((cell) => cell);\n\n      if (newRow.length > 1) {\n        newRow = this.mergeCells(newRow, direction);\n      }\n\n      while (newRow.length < 4) {\n        if (direction === 'left' || direction === 'up') {\n          newRow.push(0);\n        } else {\n          newRow.unshift(0);\n        }\n      }\n\n      newGrid.push(newRow);\n    }\n\n    return JSON.stringify(grid) !== JSON.stringify(newGrid) ? newGrid : false;\n  }\n\n  hasAvailableMoves(grid) {\n    for (let x = 0; x < grid.length; x++) {\n      for (let y = 0; y < grid[x].length; y++) {\n        if (grid[x][y] === 0) {\n          return true;\n        }\n\n        if (x < grid.length - 1 && grid[x][y] === grid[x + 1][y]) {\n          return true;\n        }\n\n        if (y < grid[x].length - 1 && grid[x][y] === grid[x][y + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getRandomCell() {\n    while (true) {\n      const totalCells = this.state.length * this.state[0].length;\n      const randomIndex = Math.floor(Math.random() * totalCells);\n      const x = Math.floor(randomIndex / this.state[0].length);\n      const y = randomIndex % this.state[0].length;\n      const value = Math.random() > 0.1 ? 2 : 4;\n\n      if (this.isEmpty(this.state[x][y])) {\n        this.state[x][y] = value;\n\n        return [x, y, value];\n      }\n    }\n  }\n\n  getGridData(grid = this.state) {\n    const data = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      data.push(grid.map((row) => row[i]));\n    }\n\n    return data;\n  }\n\n  isEmpty(cell) {\n    return cell === 0;\n  }\n\n  mergeCells(row, direction) {\n    let currentRow = row;\n    const newRow = [];\n    let i = 0;\n\n    if (direction === 'right' || direction === 'down') {\n      currentRow = [...currentRow].reverse();\n    }\n\n    while (i < currentRow.length) {\n      if (currentRow[i] !== 0 && currentRow[i] === currentRow[i + 1]) {\n        const sum = currentRow[i] * 2;\n\n        this.score += sum;\n\n        newRow.push(sum);\n\n        if (sum === 2048) {\n          this.win();\n        }\n        i += 2;\n      } else {\n        newRow.push(currentRow[i]);\n        i++;\n      }\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      return newRow.reverse();\n    }\n\n    return newRow;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst button = document.querySelector('button');\nconst field = document.querySelector('.game-field');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst score = document.querySelector('.game-score');\n\nconst fieldRows = field.rows;\nconst fieldCells = [...fieldRows].map((row) => row.cells);\n\nfunction emptyField() {\n  for (const row of fieldCells) {\n    [...row].forEach((cell) => {\n      if (cell.classList.length === 2) {\n        cell.classList.remove(cell.classList[1]);\n        cell.classList.remove(cell.classList[1]);\n        cell.textContent = '';\n      }\n    });\n  }\n}\n\nfunction updateCell(arr, add) {\n  const cell = fieldCells[arr[0]][arr[1]];\n  const classes = cell.classList;\n  const index = [...classes].findIndex(\n    (element) => element.startsWith('field-cell--'),\n    0,\n  );\n\n  if (index !== -1) {\n    cell.classList.remove(classes[index]);\n  }\n\n  if ([...classes].includes('new')) {\n    cell.classList.remove('new');\n  }\n\n  if (add) {\n    if (\n      game.animation.newCell.length === 0 ||\n      arr.every((e, i) => e === game.animation.newCell[i])\n    ) {\n      cell.classList.add('new');\n    }\n\n    cell.classList.add(`field-cell--${arr[2]}`);\n    cell.textContent = `${arr[2]}`;\n  } else {\n    cell.classList.remove(classes[index]);\n    cell.textContent = '';\n  }\n}\n\nfunction move(grid) {\n  for (let x = 0; x < grid.length; x++) {\n    for (let y = 0; y < grid[x].length; y++) {\n      updateCell([x, y, grid[x][y]], grid[x][y] !== 0);\n      score.textContent = game.score;\n      checkStatus();\n    }\n  }\n}\n\nfunction checkStatus() {\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nbutton.addEventListener('click', (e) => {\n  if ([...e.target.classList].includes('start')) {\n    game.start();\n    move(game.state);\n\n    messageStart.classList.add('hidden');\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    game.restart();\n    score.textContent = 0;\n    emptyField();\n\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.remove('hidden');\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === 'playing') {\n    switch (e.code) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        move(game.state);\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        move(game.state);\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        move(game.state);\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        move(game.state);\n        break;\n    }\n  }\n});\n\nfield.addEventListener('touchstart', handleTouchStart, { passive: true });\nfield.addEventListener('touchmove', handleTouchMove, { passive: true });\nfield.addEventListener('touchend', handleTouchEnd, { passive: true });\n\nlet touchStartX, touchStartY, swipeDirection;\n\nfunction handleTouchStart(e) {\n  touchStartX = e.touches[0].clientX;\n  touchStartY = e.touches[0].clientY;\n}\n\nfunction handleTouchMove(e) {\n  const currentX = e.touches[0].clientX;\n  const currentY = e.touches[0].clientY;\n\n  const swipeX = currentX - touchStartX;\n  const swipeY = currentY - touchStartY;\n\n  if (Math.abs(swipeX) > Math.abs(swipeY)) {\n    swipeDirection = swipeX > 0 ? 'right' : 'left';\n  } else {\n    swipeDirection = swipeY > 0 ? 'down' : 'up';\n  }\n}\n\nfunction handleTouchEnd(e) {\n  if (game.status === 'playing') {\n    switch (swipeDirection) {\n      case 'left':\n        game.moveLeft();\n        move(game.state);\n        break;\n      case 'right':\n        game.moveRight();\n        move(game.state);\n        break;\n      case 'up':\n        game.moveUp();\n        move(game.state);\n        break;\n      case 'down':\n        game.moveDown();\n        move(game.state);\n        break;\n    }\n  }\n}\n"]}